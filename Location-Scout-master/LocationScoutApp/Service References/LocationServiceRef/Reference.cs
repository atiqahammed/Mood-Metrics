//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LocationScoutApp.LocationServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LocationServiceRef.ILocationServices")]
    public interface ILocationServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationServices/getSolarIntensity", ReplyAction="http://tempuri.org/ILocationServices/getSolarIntensityResponse")]
        decimal getSolarIntensity(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationServices/getSolarIntensity", ReplyAction="http://tempuri.org/ILocationServices/getSolarIntensityResponse")]
        System.Threading.Tasks.Task<decimal> getSolarIntensityAsync(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationServices/getWindIntensity", ReplyAction="http://tempuri.org/ILocationServices/getWindIntensityResponse")]
        decimal getWindIntensity(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationServices/getWindIntensity", ReplyAction="http://tempuri.org/ILocationServices/getWindIntensityResponse")]
        System.Threading.Tasks.Task<decimal> getWindIntensityAsync(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationServices/getLatLonByZipCode", ReplyAction="http://tempuri.org/ILocationServices/getLatLonByZipCodeResponse")]
        string getLatLonByZipCode(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationServices/getLatLonByZipCode", ReplyAction="http://tempuri.org/ILocationServices/getLatLonByZipCodeResponse")]
        System.Threading.Tasks.Task<string> getLatLonByZipCodeAsync(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationServices/findNearestStore", ReplyAction="http://tempuri.org/ILocationServices/findNearestStoreResponse")]
        string findNearestStore(string zipOrCityName, string storeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationServices/findNearestStore", ReplyAction="http://tempuri.org/ILocationServices/findNearestStoreResponse")]
        System.Threading.Tasks.Task<string> findNearestStoreAsync(string zipOrCityName, string storeName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILocationServicesChannel : LocationScoutApp.LocationServiceRef.ILocationServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocationServicesClient : System.ServiceModel.ClientBase<LocationScoutApp.LocationServiceRef.ILocationServices>, LocationScoutApp.LocationServiceRef.ILocationServices {
        
        public LocationServicesClient() {
        }
        
        public LocationServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LocationServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocationServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocationServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public decimal getSolarIntensity(decimal latitude, decimal longitude) {
            return base.Channel.getSolarIntensity(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<decimal> getSolarIntensityAsync(decimal latitude, decimal longitude) {
            return base.Channel.getSolarIntensityAsync(latitude, longitude);
        }
        
        public decimal getWindIntensity(decimal latitude, decimal longitude) {
            return base.Channel.getWindIntensity(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<decimal> getWindIntensityAsync(decimal latitude, decimal longitude) {
            return base.Channel.getWindIntensityAsync(latitude, longitude);
        }
        
        public string getLatLonByZipCode(string zipcode) {
            return base.Channel.getLatLonByZipCode(zipcode);
        }
        
        public System.Threading.Tasks.Task<string> getLatLonByZipCodeAsync(string zipcode) {
            return base.Channel.getLatLonByZipCodeAsync(zipcode);
        }
        
        public string findNearestStore(string zipOrCityName, string storeName) {
            return base.Channel.findNearestStore(zipOrCityName, storeName);
        }
        
        public System.Threading.Tasks.Task<string> findNearestStoreAsync(string zipOrCityName, string storeName) {
            return base.Channel.findNearestStoreAsync(zipOrCityName, storeName);
        }
    }
}
